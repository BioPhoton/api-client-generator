/* tslint:disable */

import * as models from '../models';

/* pre-prepared guards for build in complex types */

export function isany(_: any): _ is any {
  return true;
}

export function isstring(arg: any): arg is string {
  return typeof arg === 'string';
}

export function isnumber(arg: any): arg is number {
  return typeof arg === 'number';
}

export function isboolean(arg: any): arg is boolean {
  return typeof arg === 'boolean';
}

export function isObject(arg: any): arg is any {
  return typeof arg === 'object';
}

export function isBlob(arg: any): arg is Blob {
  return arg != null && typeof arg.size === 'number' && typeof arg.type === 'string' && typeof arg.slice === 'function';
}

export function isFile(arg: any): arg is File {
return arg != null && typeof arg.lastModified === 'number' && typeof arg.name === 'string' && isBlob(arg);
}

/* generated type guards */

{{#definitions}}
{{^isEnum}}
export function is{{&definitionName}}(arg: any): arg is models.{{&definitionName}} {
  return (
  arg != null &&
  typeof arg === 'object' &&
  {{#properties}}
    // {{&name}}{{^isRequired}}?{{/isRequired}}: {{#isDictionary}}{ [key: string]: {{&typescriptType}} }{{/isDictionary}}{{^isDictionary}}{{&typescriptType}}{{/isDictionary}}{{#isArray}}[]{{/isArray}}
    {{&guard}}
  {{/properties}}
  {{#extend}}
    // extends {{&.}}
    is{{&.}}(arg) &&
  {{/extend}}

  true
  );
  }

{{/isEnum}}{{#isEnum}}
export function is{{&definitionName}}(arg: any): arg is models.{{&definitionName}} {
  return false
  {{#properties}} || arg === models.{{&definitionName}}.{{name}}
  {{/properties}};
  }

{{/isEnum}}
{{/definitions}}

